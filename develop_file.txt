# 可滑动卡片队列开发文档

## 功能需求

创建一个类似 Campus Marketplace 的可滑动卡片队列组件，具有以下特性：
- 支持左右滑动查看更多卡片
- 两侧具有渐隐效果
- 显示导航点指示器
- 支持鼠标拖拽和触摸滑动

## 技术实现方案

### 1. 组件结构

```jsx
<div className="carousel-container">
  {/* 左侧渐隐遮罩 */}
  <div className="fade-mask fade-left"></div>
  
  {/* 滑动容器 */}
  <div className="carousel-wrapper">
    <div className="carousel-track">
      {/* 卡片列表 */}
      <div className="card-item">...</div>
      <div className="card-item">...</div>
      <div className="card-item">...</div>
    </div>
  </div>
  
  {/* 右侧渐隐遮罩 */}
  <div className="fade-mask fade-right"></div>
  
  {/* 导航按钮（可选） */}
  <button className="nav-btn prev">‹</button>
  <button className="nav-btn next">›</button>
  
  {/* 指示器 */}
  <div className="indicators">
    <span className="dot active"></span>
    <span className="dot"></span>
    <span className="dot"></span>
  </div>
</div>
```

### 2. 核心样式

```css
/* 容器样式 */
.carousel-container {
  position: relative;
  width: 100%;
  overflow: hidden;
  padding: 20px 0;
}

/* 滑动包装器 */
.carousel-wrapper {
  overflow: hidden;
  width: 100%;
}

/* 滑动轨道 */
.carousel-track {
  display: flex;
  transition: transform 0.3s ease-out;
  cursor: grab;
}

.carousel-track:active {
  cursor: grabbing;
}

/* 卡片样式 */
.card-item {
  flex: 0 0 300px; /* 固定宽度 */
  margin: 0 15px;
  background: white;
  border-radius: 12px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s ease;
}

.card-item:hover {
  transform: translateY(-5px);
  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
}

/* 渐隐遮罩 */
.fade-mask {
  position: absolute;
  top: 0;
  bottom: 0;
  width: 100px;
  pointer-events: none;
  z-index: 10;
}

.fade-left {
  left: 0;
  background: linear-gradient(to right, 
    rgba(255, 255, 255, 1) 0%, 
    rgba(255, 255, 255, 0) 100%);
}

.fade-right {
  right: 0;
  background: linear-gradient(to left, 
    rgba(255, 255, 255, 1) 0%, 
    rgba(255, 255, 255, 0) 100%);
}

/* 导航按钮 */
.nav-btn {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  background: white;
  border: none;
  width: 40px;
  height: 40px;
  border-radius: 50%;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  cursor: pointer;
  z-index: 20;
  transition: all 0.3s ease;
}

.nav-btn:hover {
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.nav-btn.prev {
  left: 20px;
}

.nav-btn.next {
  right: 20px;
}

/* 指示器 */
.indicators {
  display: flex;
  justify-content: center;
  gap: 8px;
  margin-top: 20px;
}

.dot {
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background: #ccc;
  cursor: pointer;
  transition: background 0.3s ease;
}

.dot.active {
  background: #333;
}
```

### 3. JavaScript 实现

```javascript
class Carousel {
  constructor(container) {
    this.container = container;
    this.track = container.querySelector('.carousel-track');
    this.cards = container.querySelectorAll('.card-item');
    this.prevBtn = container.querySelector('.nav-btn.prev');
    this.nextBtn = container.querySelector('.nav-btn.next');
    this.dots = container.querySelectorAll('.dot');
    
    this.currentIndex = 0;
    this.cardWidth = 330; // 卡片宽度 + 间距
    this.visibleCards = 3; // 可见卡片数量
    this.maxIndex = Math.max(0, this.cards.length - this.visibleCards);
    
    this.isDragging = false;
    this.startPos = 0;
    this.currentTranslate = 0;
    this.prevTranslate = 0;
    this.animationID = null;
    this.startTime = null;
    
    this.init();
  }
  
  init() {
    // 绑定事件
    this.bindEvents();
    this.updateUI();
  }
  
  bindEvents() {
    // 按钮点击
    this.prevBtn?.addEventListener('click', () => this.prev());
    this.nextBtn?.addEventListener('click', () => this.next());
    
    // 指示器点击
    this.dots.forEach((dot, index) => {
      dot.addEventListener('click', () => this.goToSlide(index));
    });
    
    // 鼠标事件
    this.track.addEventListener('mousedown', this.handleStart.bind(this));
    this.track.addEventListener('mousemove', this.handleMove.bind(this));
    this.track.addEventListener('mouseup', this.handleEnd.bind(this));
    this.track.addEventListener('mouseleave', this.handleEnd.bind(this));
    
    // 触摸事件
    this.track.addEventListener('touchstart', this.handleStart.bind(this));
    this.track.addEventListener('touchmove', this.handleMove.bind(this));
    this.track.addEventListener('touchend', this.handleEnd.bind(this));
    
    // 阻止拖拽时的默认行为
    this.track.addEventListener('dragstart', e => e.preventDefault());
  }
  
  handleStart(e) {
    this.isDragging = true;
    this.startTime = Date.now();
    this.track.style.cursor = 'grabbing';
    
    this.startPos = this.getPositionX(e);
    this.animationID = requestAnimationFrame(this.animation.bind(this));
  }
  
  handleMove(e) {
    if (!this.isDragging) return;
    
    const currentPosition = this.getPositionX(e);
    this.currentTranslate = this.prevTranslate + currentPosition - this.startPos;
  }
  
  handleEnd() {
    if (!this.isDragging) return;
    
    this.isDragging = false;
    this.track.style.cursor = 'grab';
    cancelAnimationFrame(this.animationID);
    
    const movedBy = this.currentTranslate - this.prevTranslate;
    const timeTaken = Date.now() - this.startTime;
    const velocity = movedBy / timeTaken;
    
    // 根据移动距离和速度决定是否切换
    if (Math.abs(velocity) > 0.5 || Math.abs(movedBy) > 100) {
      if (movedBy > 0 && this.currentIndex > 0) {
        this.currentIndex--;
      } else if (movedBy < 0 && this.currentIndex < this.maxIndex) {
        this.currentIndex++;
      }
    }
    
    this.setPositionByIndex();
    this.updateUI();
  }
  
  getPositionX(e) {
    return e.type.includes('mouse') ? e.pageX : e.touches[0].clientX;
  }
  
  animation() {
    this.setSliderPosition();
    if (this.isDragging) requestAnimationFrame(this.animation.bind(this));
  }
  
  setSliderPosition() {
    this.track.style.transform = `translateX(${this.currentTranslate}px)`;
  }
  
  setPositionByIndex() {
    this.currentTranslate = this.currentIndex * -this.cardWidth;
    this.prevTranslate = this.currentTranslate;
    this.setSliderPosition();
  }
  
  prev() {
    if (this.currentIndex > 0) {
      this.currentIndex--;
      this.setPositionByIndex();
      this.updateUI();
    }
  }
  
  next() {
    if (this.currentIndex < this.maxIndex) {
      this.currentIndex++;
      this.setPositionByIndex();
      this.updateUI();
    }
  }
  
  goToSlide(index) {
    this.currentIndex = Math.min(index, this.maxIndex);
    this.setPositionByIndex();
    this.updateUI();
  }
  
  updateUI() {
    // 更新按钮状态
    if (this.prevBtn) {
      this.prevBtn.disabled = this.currentIndex === 0;
      this.prevBtn.style.opacity = this.currentIndex === 0 ? '0.5' : '1';
    }
    
    if (this.nextBtn) {
      this.nextBtn.disabled = this.currentIndex === this.maxIndex;
      this.nextBtn.style.opacity = this.currentIndex === this.maxIndex ? '0.5' : '1';
    }
    
    // 更新指示器
    this.dots.forEach((dot, index) => {
      dot.classList.toggle('active', index === this.currentIndex);
    });
  }
}

// 初始化
document.addEventListener('DOMContentLoaded', () => {
  const carousels = document.querySelectorAll('.carousel-container');
  carousels.forEach(carousel => new Carousel(carousel));
});
```

### 4. React 组件版本

```jsx
import React, { useState, useRef, useEffect } from 'react';
import './Carousel.css';

const Carousel = ({ items, visibleCards = 3 }) => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isDragging, setIsDragging] = useState(false);
  const [startPos, setStartPos] = useState(0);
  const [currentTranslate, setCurrentTranslate] = useState(0);
  const [prevTranslate, setPrevTranslate] = useState(0);
  
  const trackRef = useRef(null);
  const cardWidth = 330; // 卡片宽度 + 间距
  const maxIndex = Math.max(0, items.length - visibleCards);
  
  useEffect(() => {
    setPrevTranslate(currentIndex * -cardWidth);
    setCurrentTranslate(currentIndex * -cardWidth);
  }, [currentIndex, cardWidth]);
  
  const handleStart = (e) => {
    setIsDragging(true);
    setStartPos(getPositionX(e));
  };
  
  const handleMove = (e) => {
    if (!isDragging) return;
    
    const currentPosition = getPositionX(e);
    setCurrentTranslate(prevTranslate + currentPosition - startPos);
  };
  
  const handleEnd = () => {
    if (!isDragging) return;
    
    setIsDragging(false);
    const movedBy = currentTranslate - prevTranslate;
    
    if (Math.abs(movedBy) > 100) {
      if (movedBy > 0 && currentIndex > 0) {
        setCurrentIndex(currentIndex - 1);
      } else if (movedBy < 0 && currentIndex < maxIndex) {
        setCurrentIndex(currentIndex + 1);
      }
    } else {
      setCurrentTranslate(prevTranslate);
    }
  };
  
  const getPositionX = (e) => {
    return e.type.includes('mouse') ? e.pageX : e.touches[0].clientX;
  };
  
  const handlePrev = () => {
    if (currentIndex > 0) setCurrentIndex(currentIndex - 1);
  };
  
  const handleNext = () => {
    if (currentIndex < maxIndex) setCurrentIndex(currentIndex + 1);
  };
  
  return (
    <div className="carousel-container">
      <div className="fade-mask fade-left" />
      
      <div className="carousel-wrapper">
        <div
          ref={trackRef}
          className="carousel-track"
          style={{ transform: `translateX(${isDragging ? currentTranslate : currentIndex * -cardWidth}px)` }}
          onMouseDown={handleStart}
          onMouseMove={handleMove}
          onMouseUp={handleEnd}
          onMouseLeave={handleEnd}
          onTouchStart={handleStart}
          onTouchMove={handleMove}
          onTouchEnd={handleEnd}
        >
          {items.map((item, index) => (
            <div key={index} className="card-item">
              {item}
            </div>
          ))}
        </div>
      </div>
      
      <div className="fade-mask fade-right" />
      
      <button
        className="nav-btn prev"
        onClick={handlePrev}
        disabled={currentIndex === 0}
      >
        ‹
      </button>
      
      <button
        className="nav-btn next"
        onClick={handleNext}
        disabled={currentIndex === maxIndex}
      >
        ›
      </button>
      
      <div className="indicators">
        {Array.from({ length: Math.min(items.length, maxIndex + 1) }).map((_, index) => (
          <span
            key={index}
            className={`dot ${index === currentIndex ? 'active' : ''}`}
            onClick={() => setCurrentIndex(Math.min(index, maxIndex))}
          />
        ))}
      </div>
    </div>
  );
};

export default Carousel;
```

## 使用示例

### HTML 结构
```html
<div class="carousel-container">
  <div class="fade-mask fade-left"></div>
  
  <div class="carousel-wrapper">
    <div class="carousel-track">
      <div class="card-item">
        <img src="product1.jpg" alt="Product 1">
        <h3>MacBook Pro 2024</h3>
        <p>$899</p>
      </div>
      <div class="card-item">
        <img src="product2.jpg" alt="Product 2">
        <h3>Mountain Bike</h3>
        <p>$299</p>
      </div>
      <!-- 更多卡片 -->
    </div>
  </div>
  
  <div class="fade-mask fade-right"></div>
  
  <button class="nav-btn prev">‹</button>
  <button class="nav-btn next">›</button>
  
  <div class="indicators">
    <span class="dot active"></span>
    <span class="dot"></span>
    <span class="dot"></span>
  </div>
</div>
```

### React 使用
```jsx
const products = [
  { id: 1, name: 'MacBook Pro 2024', price: '$899', image: 'product1.jpg' },
  { id: 2, name: 'Mountain Bike', price: '$299', image: 'product2.jpg' },
  // 更多产品
];

function App() {
  return (
    <Carousel
      items={products.map(product => (
        <div key={product.id}>
          <img src={product.image} alt={product.name} />
          <h3>{product.name}</h3>
          <p>{product.price}</p>
        </div>
      ))}
      visibleCards={3}
    />
  );
}
```

## 配置选项

| 参数 | 类型 | 默认值 | 说明 |
|------|------|--------|------|
| visibleCards | number | 3 | 可见卡片数量 |
| cardWidth | number | 330 | 卡片宽度（含间距） |
| animationDuration | number | 300 | 动画持续时间（毫秒） |
| showNavButtons | boolean | true | 是否显示导航按钮 |
| showIndicators | boolean | true | 是否显示指示器 |
| fadeWidth | number | 100 | 渐隐区域宽度 |
| autoPlay | boolean | false | 是否自动播放 |
| autoPlayInterval | number | 3000 | 自动播放间隔 |

## 响应式适配

```css
/* 平板设备 */
@media (max-width: 768px) {
  .card-item {
    flex: 0 0 250px;
  }
  
  .fade-mask {
    width: 50px;
  }
}

/* 手机设备 */
@media (max-width: 480px) {
  .card-item {
    flex: 0 0 80vw;
  }
  
  .nav-btn {
    display: none;
  }
  
  .fade-mask {
    width: 30px;
  }
}
```

## 性能优化建议

1. **懒加载图片**
   ```javascript
   <img loading="lazy" src={image} alt={title} />
   ```

2. **使用 CSS transform 而非 left/right**
   - transform 性能更好，不会触发重排

3. **节流处理滑动事件**
   ```javascript
   const throttledHandleMove = throttle(handleMove, 16);
   ```

4. **预加载相邻卡片的图片**
   ```javascript
   const preloadImage = (src) => {
     const img = new Image();
     img.src = src;
   };
   ```

## 浏览器兼容性

- Chrome 60+
- Firefox 60+
- Safari 12+
- Edge 79+
- iOS Safari 12+
- Android Chrome 60+

## 常见问题

### Q: 如何调整渐隐效果的强度？
A: 修改 `.fade-mask` 的 `width` 和渐变色的透明度分布。

### Q: 如何实现无限循环？
A: 在滑动到最后一个时，克隆第一个卡片到末尾，实现无缝循环。

### Q: 如何添加自动播放？
A: 使用 `setInterval` 定时调用 `next()` 方法，注意在用户交互时暂停。

## 总结

这个可滑动卡片队列组件提供了流畅的用户体验，支持多种交互方式，并且具有良好的性能和兼容性。通过配置选项可以轻松定制，满足不同场景的需求。